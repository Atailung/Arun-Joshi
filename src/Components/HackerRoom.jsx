
// import gsap from 'gsap';
// import { useGSAP } from '@gsap/react';
// import { useRef, useState } from 'react';
// import { Float, useGLTF, useTexture } from '@react-three/drei';

// const HackerRoom = (props) => {
//   const { nodes } = useGLTF('/models/hacker-room.glb');

//   const texture = useTexture('textures/cube.png');

//   const cubeRef = useRef();
//   const [hovered, setHovered] = useState(false);

//   useGSAP(() => {
//     gsap
//       .timeline({
//         repeat: -1,
//         repeatDelay: 0.5,
//       })
//       .to(cubeRef.current.rotation, {
//         y: hovered ? '+=2' : `+=${Math.PI * 2}`,
//         x: hovered ? '+=2' : `-=${Math.PI * 2}`,
//         duration: 2.5,
//         stagger: {
//           each: 0.15,
//         },
//       });
//   });

//   return (
//     <Float floatIntensity={2}>
//       <group position={[9, -4, 0]} rotation={[2.6, 0.8, -1.8]} scale={0.74} dispose={null} {...props}>
//         <mesh
//           ref={cubeRef}
//           castShadow
//           receiveShadow
//           geometry={nodes.Cube.geometry}
//           material={nodes.Cube.material}
//           onPointerEnter={() => setHovered(true)}>
//           <meshMatcapMaterial matcap={texture} toneMapped={false} />
//         </mesh>
//       </group>
//     </Float>
//   );
// };

// useGLTF.preload('/models/hacker-room.glb');

// export default HackerRoom;

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T 
Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/hacker-room-new-transformed.glb [2.56MB] (93%)
*/

import { useGLTF, useTexture } from '@react-three/drei';

export function HackerRoom(props) {
  const { nodes, materials } = useGLTF('/models/hacker-room.glb');

  const monitortxt = useTexture('textures/desk/monitor.png');
  const screenTxt = useTexture('textures/desk/screen.png');

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.screen_screens_0.geometry} material={materials.screens}>
        <meshMatcapMaterial map={screenTxt} />
      </mesh>
      <mesh geometry={nodes.screen_glass_glass_0.geometry} material={materials.glass} />
      <mesh geometry={nodes.table_table_mat_0_1.geometry} material={materials.table_mat} />
      <mesh geometry={nodes.table_table_mat_0_2.geometry} material={materials.computer_mat}>
        <meshMatcapMaterial map={monitortxt} />
      </mesh>
      <mesh geometry={nodes.table_table_mat_0_3.geometry} material={materials.server_mat} />
      <mesh geometry={nodes.table_table_mat_0_4.geometry} material={materials.vhsPlayer_mat} />
      <mesh geometry={nodes.table_table_mat_0_5.geometry} material={materials.stand_mat} />
      <mesh geometry={nodes.table_table_mat_0_6.geometry} material={materials.mat_mat} />
      <mesh geometry={nodes.table_table_mat_0_7.geometry} material={materials.arm_mat} />
      <mesh geometry={nodes.table_table_mat_0_8.geometry} material={materials.tv_mat}>
        <meshMatcapMaterial map={monitortxt} />
      </mesh>
      <mesh geometry={nodes.table_table_mat_0_9.geometry} material={materials.cables_mat} />
      <mesh geometry={nodes.table_table_mat_0_10.geometry} material={materials.props_mat} />
      <mesh geometry={nodes.table_table_mat_0_11.geometry} material={materials.ground_mat} />
      <mesh geometry={nodes.table_table_mat_0_12.geometry} material={materials.key_mat} />
    </group>
  );
}

useGLTF.preload('/models/hacker-room.glb');